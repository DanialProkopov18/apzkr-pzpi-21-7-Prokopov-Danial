1 Архітектура системи

Архітектура системи обліку багажу в літаках має на меті забезпечити надійну, масштабовану та зручну у використанні платформу для відстеження та керування багажем пасажирів. Основною метою даної архітектури є створення мобільного додатку, який буде взаємодіяти з централізованою базою даних через API, розроблене на основі сучасних технологій .NET. Додаток повинен забезпечувати високий рівень продуктивності та безпеки, а також бути інтуїтивно зрозумілим для користувачів.
Use Case діаграма ілюструє основні сценарії взаємодії користувачів з системою обліку багажу. Діаграму показано на рисунку 5.1.
Use Case діаграма показує, як користувач взаємодіє з різними функціями системи, і дозволяє зрозуміти основні вимоги до мобільного застосунку.
ER діаграма відображає структуру бази даних і показує взаємозв'язок між основними сутностями системи: рейсами, пасажирами, багажем тощо. Діаграму показано на рисунку 5.2.
ER діаграма допомагає візуалізувати структуру даних і забезпечити, що всі необхідні відношення між сутностями враховані під час розробки бази даних.
Діаграма компонентів показує розподіл системи на компоненти та їх взаємодію. Діаграму показано на рисунку 5.3.
Діаграма дозволяє зрозуміти, як різні частини системи взаємодіють одна з одною і які інтерфейси використовуються для забезпечення цієї взаємодії.
Діаграма діяльності ілюструє процеси та потоки управління в системі. Один з ключових процесів, який можна відобразити на Activity діаграмі, це процес реєстрації багажу під час перельоту. Діаграму показано на рисунку 5.4.
Архітектура системи обліку багажу в літаках базується на чітко визначених рівнях і компонентах, які забезпечують надійну та ефективну роботу мобільного застосунку. Діаграми, представлені в цьому розділі, допомагають візуалізувати і краще зрозуміти структуру системи, її основні компоненти та процеси. Використання сучасних технологій, таких як .NET і Xamarin, дозволяє створити масштабовану і зручну для користувача систему, що відповідає вимогам сучасного програмного забезпечення.

2 Мобільний застосунок

Розробка мобільного застосунку для системи обліку багажу в літаках була здійснена з використанням передових методик та практик програмування для забезпечення ефективності та коректності функціонування програми.
Під час розробки мобільного додатку було використано модель архітектури MVVM (Model-View-ViewModel), яка дозволяє розділити логіку програми від її представлення та бізнес-логіки. Це сприяє полегшенню тестування та підтримці коду, а також дозволяє забезпечити швидку реакцію на зміни вимог до програмного забезпечення.
Структура додатку включає різні екрани, такі як екран перегляду рейсів, екран деталізованого перегляду рейсу, екран перегляду багажів та екран деталізованого перегляду багажу. Кожен з цих екранів був ретельно розроблений з урахуванням зручності користувача та ефективного відображення інформації.
Функціонал додатку включає можливість перегляду інформації про рейси та багаж, а також пошук багажу за різними критеріями. Користувач може отримати детальну інформацію про конкретний рейс або багаж, включаючи дані про пасажирів та їх багаж.
Під час розробки мобільного застосунку, було інтегровано функціонал для роботи з QR-кодами. QR-коди використовуються для ідентифікації та отримання додаткової інформації про багаж.
На екрані деталізованого перегляду багажу користувач має можливість переглядати QR-код, який асоціюється з конкретним багажем. Цей QR-код містить у собі унікальну інформацію про багаж, таку як його ідентифікатор та додаткові дані.
Інтеграція QR-кодів дозволяє забезпечити зручний та швидкий доступ до даних про багаж, спрощуючи процес взаємодії користувача з мобільним застосунком. Крім того, вона робить процес ідентифікації багажу більш надійним та ефективним, що допомагає уникнути помилок та сприяє збереженню часу та зусиль.
Усі важливі аспекти розробки, такі як безпека, швидкодія та зручність користування, були враховані під час створення мобільного застосунку, забезпечуючи надійну та зручну для користувача роботу програми.

3 Використані технології

Для розробки мобільного застосунку були використані наступні технології:
–	.NET [4]: Основна платформа, на якій ґрунтується розробка, використовуючи мову програмування C#;
–	xamarin.Forms [1]: Фреймворк для розробки крос-платформових мобільних додатків за допомогою мови програмування C#. Xamarin.Forms [1] дозволяє створювати єдиний код, який може бути використаний для побудови додатків для платформ Android, iOS та Windows;
–	microsoft.Extensions.DependencyInjection: Ця бібліотека використовується для реалізації інверсії управління та внедрення залежностей в додатку. Вона дозволяє ефективно організувати структуру додатку та забезпечити його модульність та розширюваність;
–	newtonsoft.Json [2]: Бібліотека для роботи з форматом JSON [2] в .NET [4]. Вона використовується для серіалізації та десеріалізації даних між сервером і клієнтом у форматі JSON.
Додатково до зазначених технологій, для розробки мобільного застосунку використовувався Visual Studio 2022 [3] - інтегроване середовище розробки (IDE) від Microsoft. Visual Studio 2022 [3] надає розширені засоби для створення, налагодження та тестування програмного забезпечення на платформах .NET [4] та Xamarin [1]. Завдяки своєму функціоналу, Visual Studio допомагає розробникам підтримувати високу продуктивність та забезпечує швидку реалізацію проектів. Також використання Visual Studio 2022 сприяє забезпеченню сумісності з найновішими версіями .NET та Xamarin, що дозволяє користуватися перевагами оновлень та нововведень у сфері розробки програмного забезпечення.
Використання цих технологій дозволило розробити мобільний застосунок з ефективним та зручним інтерфейсом, який відповідає вимогам функціональності та продуктивності.
