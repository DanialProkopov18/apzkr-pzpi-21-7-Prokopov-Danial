1.1 Архітектура системи

Даний розділ у системі обліку багажу в літаках включає в себе розгляд архітектури системи, що визначає структуру, компоненти та взаємодію між ними. Для забезпечення ефективного та надійного функціонування системи, архітектурне рішення повинно бути добре продуманим та відповідати потребам користувачів.
Першим етапом розробки є визначення ключових компонентів клієнтської частини системи обліку багажу. Основний компонент - це веб-додаток, який надає адміністраторам можливість здійснювати різноманітні операції, пов'язані з обліком та керуванням багажем. Важливо забезпечити зручний інтерфейс для користувачів, щоб вони могли легко користуватися системою.
Далі необхідно визначити технологічні рішення для реалізації цих компонентів. Для веб-додатку можна використовувати такі технології, як HTML, CSS, JavaScript або TypeScript [2] для розробки клієнтської частини, а також фреймворк, такий як React, для створення динамічного та інтерактивного інтерфейсу.
Також важливо врахувати масштабованість системи, оскільки обсяги даних про багаж можуть зростати з часом. Архітектура повинна бути розроблена таким чином, щоб забезпечити можливість масштабування та оптимізації продуктивності, наприклад, шляхом використання розподілених систем або кешування даних.
Use case діаграма показана на рисунку 1.1.
Нижче наведено ER-діаграму (див. рис. 1.2), яка є графічним зображенням структури бази даних для системи обліку багажу в літаках. ER-діаграма є важливим інструментом проектування баз даних, який допомагає візуалізувати сутності та їх взаємозв'язки в системі.
Ця діаграма моделює різні сутності, такі як багаж, пасажири, рейси та інші, а також визначає їх атрибути та зв'язки між ними. Розуміння структури бази даних за допомогою ER-діаграми дозволяє розробникам краще планувати та створювати ефективні та надійні системи обліку багажу в літаках.
На рисунку 1.3 представлено діаграму пакетів системи обліку багажу в літаках. Ці діаграмми дозволяють уявити модульну організацію програмного забезпечення та визначити взаємозв'язки між різними компонентами системи. 
Вони допомагають розробникам краще розуміти архітектурні принципи та планувати розробку, спрощуючи розуміння великих системних структур.
Діаграма пакетів є важливим інструментом для аналізу та проектування систем обліку багажу в літаках. Вони допомагають організувати програмний код та визначити логічні групи функціональності. Розуміння структури системи за допомогою цих діаграм допомагає розробникам зберігати систему у гарному стані, спрощує розуміння коду та полегшує процес підтримки.
Діаграма діяльності (див. рис. 1.4) наводить графічне представлення послідовності операцій або кроків, які виконуються в системі обліку багажу в літаках. Цей вид діаграми дозволяє візуально відобразити взаємодію між різними об'єктами або агентами системи та ілюструє порядок виконання дій у певному процесі.
Діаграма компонентів (див. рис. 1.5) надає візуальне уявлення про структуру системи обліку багажу в літаках та відображає взаємозв'язки між різними компонентами програмного забезпечення. Цей вид діаграми допомагає розробникам краще зрозуміти архітектурну організацію системи та планувати розробку, визначаючи логічні модулі та їх взаємозв'язки.
У цьому розділі було досліджено архітектурну структуру системи обліку багажу в літаках. Аналізуючи діаграми компонентів та діаграму пакетів, було отримано глибоке розуміння проекту та взаємозв'язків між його складовими частинами. Цей розділ дозволив нам виявити ключові компоненти та модулі, що формують систему, а також з'ясувати, як вони взаємодіють між собою.
За допомогою архітектурного аналізу було підготовлено основу для подальшої розробки системи обліку багажу в літаках. Цей розділ став важливим кроком у процесі проектування та планування системи, дозволяючи чітко визначити її структуру та функціональні можливості.

1.2 Опис інтерфейсу

Для реалізації системи обліку багажу в літаках було створено веб-сайт адміністратора. Цей розділ описує процес розробки, вибір технологій, структуру інтерфейсу, а також основні функціональні можливості сайту.
Сайт адміністратора був розроблений з використанням сучасних веб-технологій, які забезпечують високу продуктивність, масштабованість та зручність використання. Для фронтенд-частини було обрано React – популярну бібліотеку для створення користувацьких інтерфейсів. React дозволяє створювати динамічні, інтерактивні компоненти, що значно покращує взаємодію користувача із сайтом. Для управління станом додатку було використано MobX, що дозволяє ефективно управляти даними та станом додатку.
Сайт адміністратора складається з декількох основних розділів, кожен з яких відповідає за певну функціональність системи. Нижче наведено основні розділи сайту та їх короткий опис:
–	керування багажем - розділ, що дозволяє адміністратору додавати, оновлювати та видаляти інформацію про багаж. Тут можна переглядати детальну інформацію про кожен багаж;
–	керування рейсами - розділ для управління рейсами, де адміністратор може додавати нові рейси, оновлювати інформацію про існуючі рейси та видаляти рейси;
–	керування пасажирами - інтерфейс для роботи з даними пасажирів. Адміністратор може переглядати список пасажирів, їхні контактні дані, інформацію про квитки та багаж;
–	керування аеропортами - розділ, що дозволяє адміністратору додавати та оновлювати інформацію про аеропорти, з якими співпрацює авіакомпанія. Тут відображається інформація про термінали, доступні послуги та інфраструктуру.
Створений сайт адміністратора для системи обліку багажу в літаках є важливим інструментом для управління всіма аспектами процесу перевезення багажу. Використання сучасних веб-технологій, таких як React, дозволило створити зручний, продуктивний та надійний інтерфейс, що задовольняє потреби адміністратора у швидкому доступі до інформації та ефективному управлінні системою.

1.3 Використані технології

У розробці веб-частини для системи адміністрування обліку багажу в літаках використовуються сучасні технології та фреймворки, які забезпечують ефективну роботу і зручний інтерфейс для користувачів. Нижче наведено основні технології, що використовуються для реалізації веб-інтерфейсу адміністрування.
React [1] - це бібліотека JavaScript для створення користувацьких інтерфейсів, розроблена компанією Facebook. Чому вибрано: React забезпечує високу продуктивність завдяки віртуальному DOM, а також дозволяє створювати компонентну архітектуру, що значно спрощує розробку і підтримку складних інтерфейсів.
TypeScript [2] - це надбудова над JavaScript, яка додає статичну типізацію до мови. Чому вибрано: Використання TypeScript [2] дозволяє виявляти помилки на етапі компіляції, що підвищує надійність коду і полегшує процес розробки.
Bootstrap [4] - це популярний фреймворк CSS для розробки адаптивних і мобільних веб-сайтів. Чому вибрано: Bootstrap [4] забезпечує швидку і легку розробку адаптивних інтерфейсів завдяки великій кількості готових компонентів і стилів.
Як інструмент для розробки та розгортання було використано Visual Studio Code. Чому вибрано: Visual Studio Code забезпечує зручне середовище для розробки з підтримкою налагодження, інтеграції з системами контролю версій, а також широким набором розширень для різних мов і фреймворків.
У системі існує компонент Navbar (див. додаток А.1), який використовується для створення навігаційної панелі веб-додатку "AirTrack". Давайте детально розглянемо цей компонент.
Інтерфейс IProps - цей інтерфейс визначає тип пропсів, які приймає компонент Navbar. Він очікує, що в пропсах буде властивість children, яке може бути будь-якого типу, сумісного з ReactNode.
Інтерфейс ILink - цей інтерфейс описує структуру об'єктів, що представляють посилання в навігаційній панелі. Кожне посилання має URL (link), текст для відображення (text).
Константа applicationLinks - це масив об'єктів, що відповідають інтерфейсу ILink, який містить інформацію про маршрути і текстові мітки для різних розділів веб-додатку.
Компонент Navbar є функціональним компонентом React [1], який створює навігаційну панель з використанням класів Bootstrap [4] для стилізації.
Цей компонент надає зручний і інтуїтивно зрозумілий інтерфейс для навігації по різних розділах системи адміністрування. Використання React [1] і Bootstrap [4] забезпечує адаптивність і зручність використання на різних пристроях, включаючи мобільні.
