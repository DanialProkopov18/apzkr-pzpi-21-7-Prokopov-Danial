1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Побудова бази даних є критично важливим етапом у розробці системи обліку багажу в літаках, оскільки від її структури та оптимізації залежить ефективність і надійність зберігання та обробки даних. 
На цьому етапі важливо визначити основні сутності предметної області, їх атрибути та взаємозв'язки між ними. Це дозволить створити логічну модель даних, яка забезпечить цілісність та консистентність інформації в системі. 
Для візуалізації бази даних, було створено ER-діаграму, яка показана на рисунку 1.2.
Для системи обліку багажу в літаках були визначені наступні основні сутності:
–	літак: id, виробник, назва моделі, максимальна місткість пасажирів, максимальна вантажопідйомність. Первинний ключ у цієї сутності: id;
–	аеропорт: id, назва, адреса, номер телефону. Первинний ключ у цієї сутності: id;
–	багаж: id, пасажир, рейс, вага, ширина, довжина, глибина, опис. Первинний ключ у цієї сутності: id;
–	рейс: id, номер рейсу, дата та час вильоту, дата та час прибуття, аеропорт вильоту, аеропорт прибуття, літак, нотатки. Первинний ключ у цієї сутності: id;
–	пасажир: id, ім’я, прізвище, номер паспорту, дата народження, національність, номер телефону, пошта. Первинний ключ у цієї сутності: id;
–	білет: id, пасажир, рейс, ціна. Первинний ключ у цієї сутності: id.
Взаємозв'язки між сутностями:
–	багаж-пасажир: взаємозв'язок "один-до-багатьох" оскільки один пасажир може мати кілька багажів, але кожен багаж належить тільки одному пасажиру;
–	рейс-багаж: взаємозв'язок "один-до-багатьох" оскільки один рейс може мати кілька багажів, але кожен багаж належить тільки одному рейсу;
–	рейс-аеропорт: взаємозв'язок "багато-до-одного" для аеропорту відправлення і прибуття, оскільки один аеропорт може мати багато рейсів, але кожен рейс має тільки один аеропорт відправлення і один аеропорт прибуття;
–	рейс-літак: взаємозв'язок "багато-до-одного", оскільки один літак може виконувати багато рейсів, але кожен рейс виконується тільки одним літаком;
–	квиток-пасажир-рейс: Взаємозв'язок "багато-до-одного" для пасажирів і рейсів через проміжну таблицю квитків, оскільки один пасажир може мати багато квитків, і один рейс може мати багато пасажирів.


2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Перш ніж перейти до діаграми розгортання, важливо розглянути архітектурний аспект системи. 
Діаграма розгортання відображає, як саме компоненти системи фізично розміщуються на обладнанні та як вони взаємодіють між собою через мережу. 
Давайте детальніше розглянемо, як система обліку багажу в літаках розгортається та взаємодіє з різними типами пристроїв та сервісів. 
Діаграма показана на рисунку 1.4.
В результаті, серверна частина системи обліку багажу в літаках була успішно реалізована і забезпечує надійну та ефективну роботу системи, 
що дозволяє здійснювати облік та управління багажем з високою точністю та швидкістю.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина системи обліку багажу в літаках відіграє ключову роль у забезпеченні функціональності та надійності системи. Вона відповідає за обробку запитів користувачів, взаємодію з базою даних та забезпечення безпеки даних.
На основі вимог до системи було розроблено та реалізовано RESTful API, яке надає можливість виконання різноманітних операцій з даними про багаж, пасажирів, рейси, літаки та інші сутності. Це API дозволяє клієнтським додаткам здійснювати створення, читання, оновлення та видалення даних через стандартні HTTP запити.
Для реалізації серверної частини було використано фреймворк ASP.NET Core, який забезпечує швидку і ефективну розробку веб-додатків на мові програмування C#. ASP.NET Core надає гнучкість у роботі з HTTP запитами, автоматичну серіалізацію та десеріалізацію даних, а також вбудовану підтримку для забезпечення безпеки даних та автентифікації користувачів.
Для взаємодії з базою даних було використано Entity Framework Core, який забезпечує об'єктно-реляційне відображення даних та автоматичне управління зв'язками між сутностями. Це дозволило забезпечити простоту та ефективність роботи з базою даних без прямого використання SQL запитів.
У системі існує клас BarcodeService (див. додаток А.1), який реалізує інтерфейс IBarcodeService, що надає методи для генерації QR-кодів та отримання файлів цих QR-кодів. При створенні екземпляру класу він отримує екземпляр інтерфейсу IHostEnvironment через конструктор для отримання шляху до поточного середовища хостування.
Метод GenerateCode приймає об'єкт Baggage і генерує QR-код на основі серіалізованих даних цього об'єкта. Створюється QR-код із розміром 500 пікселів, з встановленими полями та чорним кольором штрих-коду. Шлях для збереження зображення генерується за допомогою ContentRootPath та ідентифікатора багажу, а зображення зберігається у форматі PNG.
Метод GetFileAsync приймає ідентифікатор і повертає вміст файлу в асинхронному режимі. Він також генерує шлях до файлу на основі ідентифікатора та ContentRootPath, читає файл з диску у форматі PNG та повертає його в байтовому представленні.
Обидва методи обробляють можливі винятки, які можуть виникнути під час генерації чи читання файлу, та просто перекидують їх для подальшого оброблення.


4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

-                

5 ПОБУДОВА ER-ДІАГРАМИ

Побудова бази даних є критично важливим етапом у розробці системи обліку багажу в літаках, оскільки від її структури та оптимізації залежить ефективність і надійність зберігання та обробки даних. 
На цьому етапі важливо визначити основні сутності предметної області, їх атрибути та взаємозв'язки між ними. 
Це дозволить створити логічну модель даних, яка забезпечить цілісність та консистентність інформації в системі. 
Для візуалізації бази даних, було створено ER-діаграму, яка показана на рисунку 1.2.

6 СПЕЦИФІКАЦІЯ REST

Літак:
–	GET /api/Aircraft - отримати список літаків;
–	POST /api/Aircraft - створити новий літак;
–	GET /api/Aircraft/{id} - отримати конкретний літак за його ідентифікатором;
–	PUT /api/Aircraft/{id} - оновити інформацію про літак;
–	DELETE /api/Aircraft/{id} - видалити літак.
Аеропорт:
–	GET /api/Airports - отримати список аеропортів;
–	POST /api/Airports - створити новий аеропорт;
–	GET /api/Airports/{id} - отримати конкретний аеропорт;
–	PUT /api/Airports/{id} - оновити інформацію про аеропорт;
–	DELETE /api/Airports/{id} - видалити аеропорт.
Багаж:
–	GET /api/Baggages - отримати список багажів;
–	POST /api/Baggages - створити новий багаж;
–	GET /api/Baggages/{id} - отримати конкретний багаж;
–	PUT /api/Baggages/{id} - оновити інформацію про багаж;
–	DELETE /api/Baggages/{id} - видалити багаж;
–	GET /api/Baggages/code/{id} - отримати фото QR-коду багажу.
Рейс:
–	GET /api/Flights - отримати список рейсів;
–	POST /api/Flights - створити новий рейс;
–	GET /api/Flights/{id} - отримати конкретний рейс за його ідентифікатором;
–	PUT /api/Flights/{id} - оновити інформацію про рейс;
–	DELETE /api/Flights/{id} - видалити рейс.
Пасажир:
–	GET /api/Passengers – отримати список пасажирів;
–	POST /api/Passengers - створити нового пасажира;
–	GET /api/Passengers/{id} - отримати конкретного пасажира за його ідентифікатором;
–	PUT /api/Passengers/{id} - оновити інформацію про пасажира;
–	DELETE /api/Passengers/{id} - видалити пасажира;
Білет:
–	GET /api/Tickets - отримати список квитків;
–	POST /api/Tickets - створити новий квиток;
–	GET /api/Tickets/{id} - отримати конкретний квиток за його ідентифікатором;
–	PUT /api/Tickets/{id} - оновити інформацію про квиток;
–	DELETE /api/Tickets/{id} - видалити квиток.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

-

ВИСНОВКИ

Лабораторна робота була спрямована на ознайомлення з розробкою серверної частини веб-додатків на прикладі створення системи обліку багажу в літаках. Завдання полягало у проектуванні серверної архітектури, реалізації API для управління даними, взаємодії з базою даних та забезпеченні безпеки і надійності серверних компонентів.
Під час виконання лабораторної роботи було визначено функціональні вимоги до системи обліку багажу та спроектовано структуру бази даних, що включає інформацію про багаж, пасажирів, рейси тощо. Для кращого розуміння процесів та взаємодій у системі була створена ER-діаграма.
На наступному етапі було налаштовано середовище розробки, встановлено необхідні інструменти та фреймворки, такі як .NET Core, ASP.NET Core та Entity Framework. Була створена база даних у вибраній системі управління базами даних, а також реалізовано відповідні таблиці.
Загалом, лабораторна робота дала глибоке розуміння процесів розробки серверних додатків та їхньої взаємодії з базою даних, а також дозволила отримати практичні навички у розробці API для веб-додатків.


ДОДАТОК А

Специфікація REST

Літак:
–	GET /api/Aircraft - отримати список літаків;
–	POST /api/Aircraft - створити новий літак;
–	GET /api/Aircraft/{id} - отримати конкретний літак за його ідентифікатором;
–	PUT /api/Aircraft/{id} - оновити інформацію про літак;
–	DELETE /api/Aircraft/{id} - видалити літак.
Аеропорт:
–	GET /api/Airports - отримати список аеропортів;
–	POST /api/Airports - створити новий аеропорт;
–	GET /api/Airports/{id} - отримати конкретний аеропорт;
–	PUT /api/Airports/{id} - оновити інформацію про аеропорт;
–	DELETE /api/Airports/{id} - видалити аеропорт.
Багаж:
–	GET /api/Baggages - отримати список багажів;
–	POST /api/Baggages - створити новий багаж;
–	GET /api/Baggages/{id} - отримати конкретний багаж;
–	PUT /api/Baggages/{id} - оновити інформацію про багаж;
–	DELETE /api/Baggages/{id} - видалити багаж;
–	GET /api/Baggages/code/{id} - отримати фото QR-коду багажу.
Рейс:
–	GET /api/Flights - отримати список рейсів;
–	POST /api/Flights - створити новий рейс;
–	GET /api/Flights/{id} - отримати конкретний рейс за його ідентифікатором;
–	PUT /api/Flights/{id} - оновити інформацію про рейс;
–	DELETE /api/Flights/{id} - видалити рейс.
Пасажир:
–	GET /api/Passengers – отримати список пасажирів;
–	POST /api/Passengers - створити нового пасажира;
–	GET /api/Passengers/{id} - отримати конкретного пасажира за його ідентифікатором;
–	PUT /api/Passengers/{id} - оновити інформацію про пасажира;
–	DELETE /api/Passengers/{id} - видалити пасажира;
Білет:
–	GET /api/Tickets - отримати список квитків;
–	POST /api/Tickets - створити новий квиток;
–	GET /api/Tickets/{id} - отримати конкретний квиток за його ідентифікатором;
–	PUT /api/Tickets/{id} - оновити інформацію про квиток;
–	DELETE /api/Tickets/{id} - видалити квиток.
